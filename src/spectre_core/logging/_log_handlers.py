# SPDX-FileCopyrightText: Â© 2024 Jimmy Fitzpatrick <jcfitzpatrick12@gmail.com>
# This file is part of SPECTRE
# SPDX-License-Identifier: GPL-3.0-or-later

from logging import getLogger
_LOGGER = getLogger(__name__)

import os
from typing import Optional, Iterator
from collections import OrderedDict
from datetime import datetime

from spectre_core._file_io import TextHandler
from spectre_core.config import get_logs_dir_path, TimeFormats

class LogHandler(TextHandler):
    """File handler specifically tailored for log files generated by `spectre`."""
    def __init__(self, 
                 start_time: str, 
                 pid: str, 
                 process_type: str):
        """Initialise a `LogHandler` instance.

        Arguments:
            start_time: The timestamp when the log file was created, used in the log file name.
            pid: The process ID of the process writing to the log file.
            process_type: Specifies whether the process was user-initiated or created internally by `spectre`, 
                          as defined in `spectre_core.logging.ProcessTypes`.
        """
        self._start_time = start_time
        self._pid = pid
        self._process_type = process_type

        dt = datetime.strptime(start_time, TimeFormats.DATETIME)
        parent_path = get_logs_dir_path(dt.year, dt.month, dt.day)
        base_file_name = f"{start_time}_{pid}_{process_type}"

        super().__init__(parent_path, base_file_name, "log")
    

    @property
    def start_time(self) -> str:
        """The timestamp when the log was created."""
        return self._start_time
    

    @property
    def pid(self) -> str:
        """The process ID of the process writing to the log file."""
        return self._pid
    

    @property
    def process_type(self) -> str:
        """Specifies whether the process was user-initiated, or created internally by `spectre`."""
        return self._process_type


class LogHandlers:
    def __init__(self, 
                 process_type: Optional[str] = None, 
                 year: Optional[int] = None, 
                 month: Optional[int] = None, 
                 day: Optional[int] = None):
        """Managed collection of log files.

        Keyword Arguments:
            process_type -- Specifies whether the process was user-initiated, or created internally by `spectre`. (default: {None})
            year -- The numeric year. (default: {None})
            month -- The numeric month. (default: {None})
            day -- The numeric day. (default: {None})
        """
        self._process_type = process_type
        self._log_handler_map: dict[str, LogHandler] = OrderedDict()
        self.set_date(year, month, day)


    @property
    def process_type(self) -> Optional[str]:
        """Specifies whether the process was user-initiated, or created internally by `spectre`."""
        return self._process_type
    

    @property
    def year(self) -> Optional[int]:
        """The numeric year."""
        return self._year


    @property 
    def month(self) -> Optional[int]:
        """The numeric month."""
        return self._month
    

    @property
    def day(self) -> Optional[int]:
        """The numeric day."""
        return self._day


    @property
    def logs_dir_path(self) -> str:
        """The shared ancestral path for all the log files. `LogHandlers` recursively searches
        this directory to find all log files according to the date and process type."""
        return get_logs_dir_path(self.year, self.month, self.day)
        

    @property
    def log_handler_list(self) -> list[LogHandler]:
        """A list of all log handlers representing files found within `logs_dir_path`."""
        return list(self._log_handler_map.values())


    @property
    def num_logs(self) -> int:
        """The number of log files found within `logs_dir_path`."""
        return len(self.log_handler_list) 


    @property
    def file_names(self) -> list[str]:
        """A list of all log file names found within `logs_dir_path`."""
        return list(self._log_handler_map.keys())


    def set_date(self, 
                 year: Optional[int],
                 month: Optional[int],
                 day: Optional[int]) -> None:
        """Reset `logs_dir_path` according to the numeric date, and refresh the list
        of available log files.

        Arguments:
            year -- The numeric year.
            month -- The numeric month of the year.
            day -- The numeric day of the month.
        """
        self._year = year
        self._month = month
        self._day = day
        self.update()


    def update(self) -> None:
        """Perform a fresh search all files in `logs_dir_path` for log files
        according to the date and process type."""
        log_files = [f for (_, _, files) in os.walk(self.logs_dir_path) for f in files]

        for log_file in log_files:
            file_name, _ = os.path.splitext(log_file)
            log_start_time, pid, process_type = file_name.split("_")

            if self.process_type and process_type != self.process_type:
                continue

            self._log_handler_map[file_name] = LogHandler(log_start_time, pid, process_type)

        self._log_handler_map = OrderedDict(sorted(self._log_handler_map.items()))


    def __iter__(self) -> Iterator[LogHandler]:
        yield from self.log_handler_list


    def get_from_file_name(self, 
                           file_name: str) -> LogHandler:
        # auto strip the extension if present
        file_name, _ = os.path.splitext(file_name)
        try:
            return self._log_handler_map[file_name]
        except KeyError:
            raise FileNotFoundError(f"Log handler for file name '{file_name}' not found in log map")


    def get_from_pid(self, 
                     pid: str) -> LogHandler:
        for log_handler in self.log_handler_list:
            if log_handler.pid == pid:
                return log_handler
        raise FileNotFoundError(f"Log handler for PID '{pid}' not found in log map")